package service

import (
	"crypto/rsa"
	"math/big"
)

type KeyManagementService interface {
	GetServerPublicKey() rsa.PublicKey
	GetServerPrivateKey() rsa.PrivateKey
	GetBlockChainHexPrivateKey() string
}

type StoredKeyManagementService struct {
	pvKey rsa.PrivateKey
	pbKey rsa.PublicKey
}

func NewStoredKeyManagementService() (*StoredKeyManagementService, error) {
	savedKey := &rsa.PrivateKey{
		PublicKey: rsa.PublicKey{
			N: fromBase10("24354539917965905832203060781284694728250397732535320795763011461191690444875999338740208927886868734218330890778277099917903889169512363903980811037433550070823552903933458695879405654115466149658881738050621411086694197461574484377409142657342591123412697088521882001601542239039052149371427498495832226285790992859829962021528225224980486970725586418598730862054680998906994872891481967787275110733639578049837498685867671131670735809034805403074160424249019296808682772486020315471877369598822616454457025025205196205086735622708732232964627591063004321122160071266555739000420117337463919777775625089689738309311"),
			E: 65537,
		},
		D: fromBase10("19698574118002605190250085385268460536110854677605509631838590590580116988906830842851228998114456533918935621990248447631845359981346588733421042029270146972766756066522800533304477393126823468592062547424925458273700139143432568898144618062780048984083193421553747061063133054716909170909266961262600891876963800939531184816578701638248743470495878882290956328210464991724699854071656458572839575164351604895356847210054850966126201278816637354809982323596032669474619723724044109016526637007067634225988189167221636317283666465802715667166755905522176015431830904645493498027297813105596515735971733038045244514689"),
		Primes: []*big.Int{
			fromBase10("140810723048241577378718630835342753859901955893754087521166283137600440011170059512014744970704786844564570714626118540553778455881601025744295874948768023064778375368504579844413826857729922862384215324186672801668439680411235629737873932727413957215120701520950030403633636502082823528080267041903609725149"),
			fromBase10("172959412399452497346790602862547234789612656398336175342274824382025463360727141344076634297003023735702265135341975776918857949104646380005275590246651947993863783744012136687377023545269581151147138982406155848977086140582423846678540524842403495446506959585786296805830082225709370250065500891991320446539"),
		},
	}
	savedKey.Precompute()
	return &StoredKeyManagementService{
		pvKey: *savedKey,
		pbKey: savedKey.PublicKey,
	}, nil
}

func (s *StoredKeyManagementService) GetServerPublicKey() rsa.PublicKey {
	return s.pbKey
}

func (s *StoredKeyManagementService) GetServerPrivateKey() rsa.PrivateKey {
	return s.pvKey
}

func (s *StoredKeyManagementService) GetBlockChainHexPrivateKey() string {
	panic("implement me")
}

func fromBase10(base10 string) *big.Int {
	i, ok := new(big.Int).SetString(base10, 10)
	if !ok {
		panic("bad number: " + base10)
	}
	return i
}
